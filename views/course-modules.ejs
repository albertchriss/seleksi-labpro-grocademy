<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Grocademy - Course Modules</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .gradient-primary {
      background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
    }

    .gradient-gold {
      background: linear-gradient(135deg, #ffd700 0%, #ffb347 100%);
    }

    .sidebar-item:hover {
      background-color: rgba(255, 255, 255, 0.1);
    }

    .sidebar-item.active {
      background-color: #ffd700;
      color: #1d4ed8;
    }

    .progress-bar {
      transition: width 0.3s ease;
    }
  </style>
</head>

<body class="bg-gray-100 min-h-screen flex">
  <%- include('partials/sidebar', { activeMenu: 'my-courses' }) %>

    <!-- Main Content -->
    <div class="flex-1 flex flex-col">
      <!-- Header -->
      <div class="bg-white border-b border-gray-200 px-8 py-6">
        <div class="flex items-center gap-4">
          <button onclick="goBack()"
            class="text-blue-600 hover:text-blue-800 flex items-center gap-2 transition-colors">
            <span>‚Üê</span>
            <span>Kembali</span>
          </button>
          <div class="h-6 w-px bg-gray-300"></div>
          <div class="flex-1">
            <h1 id="course-title" class="text-3xl font-bold text-gray-900">Loading...</h1>
            <p class="text-gray-600 mt-1">Modul pembelajaran kursus</p>
          </div>
          <div class="text-right">
            <div class="text-sm text-gray-600">Progress Kursus</div>
            <div class="text-2xl font-bold text-blue-600" id="progress-text">0%</div>
          </div>
          <button id="cert-button" onclick="downloadCertificate()"
            class="ml-2 px-6 py-3 gradient-primary text-white rounded-lg hover:shadow-lg transition-shadow flex items-center gap-2 hidden">
            <span>Unduh Sertifikat</span>
            <span>üèÜ</span>
          </button>
        </div>

        <!-- Progress Bar -->
        <div class="mt-4">
          <div class="w-full bg-gray-200 rounded-full h-3">
            <div id="progress-bar" class="progress-bar bg-blue-600 h-3 rounded-full" style="width: 0%"></div>
          </div>
        </div>
      </div>

      <!-- Content -->
      <div class="flex-1 flex">
        <!-- Module List Sidebar -->
        <div class="w-80 bg-white border-r border-gray-200 overflow-y-auto flex flex-col">
          <div class="p-6 flex-1 flex flex-col">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">Daftar Modul</h2>
            <div id="loading-modules" class="text-center py-8">
              <div class="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
              <p class="mt-2 text-gray-600 text-sm">Memuat modul...</p>
            </div>
            <div id="modules-list" class="space-y-3 hidden">
              <!-- Modules will be inserted here -->
            </div>
            <div id="error-modules" class="hidden text-center py-8">
              <p class="text-red-600 text-sm">Gagal memuat modul</p>
            </div>
          </div>
          <!-- Pagination Controls -->
          <div class="px-6 pb-4">
            <div class="flex flex-col items-center gap-2">
              <label for="modules-per-page-select" class="text-sm font-semibold">Jumlah modul per halaman</label>
              <select id="modules-per-page-select" onchange="changeModulesPerPage()"
                class="border border-gray-300 rounded-xl px-2 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 w-full">
                <option value="5">5 per halaman</option>
                <option value="10" selected>10 per halaman</option>
                <option value="20">20 per halaman</option>
              </select>
              <div id="modules-pagination-container" class="flex items-center gap-1"></div>
            </div>
          </div>
        </div>

        <!-- Module Content -->
        <div class="flex-1 flex flex-col">
          <div id="no-module-selected" class="flex-1 flex items-center justify-center">
            <div class="text-center">
              <div class="text-6xl mb-4">üìö</div>
              <h3 class="text-xl font-semibold text-gray-900 mb-2">Pilih Modul</h3>
              <p class="text-gray-600">Pilih modul dari daftar di sebelah kiri untuk mulai belajar</p>
            </div>
          </div>

          <div id="module-main-error" class="flex-1 flex items-center justify-center hidden">
            <div class="text-center flex flex-col">
              <div class="text-6xl mb-4">‚ùå</div>
              <h3 class="text-xl font-semibold text-red-600 mb-2">Gagal Memuat Modul</h3>
              <p class="text-gray-600 mb-2">Terjadi kesalahan dalam memuat modul</p>
              <a href="/my-courses"
                class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium">
                Kembali ke Daftar Kursus
              </a>
            </div>
          </div>

          <div id="module-content" class="flex-1 hidden">
            <div class="p-8">
              <div class="max-w-4xl mx-auto">
                <div class="bg-white rounded-xl shadow-lg border border-gray-200 p-8">
                  <div class="flex justify-between items-start mb-6">
                    <div>
                      <h1 id="module-title" class="text-3xl font-bold text-gray-900 mb-2">Module Title</h1>
                      <p id="module-description" class="text-gray-600">Module description</p>
                    </div>
                    <button id="complete-btn" onclick="toggleModuleCompletion()"
                      class="px-6 py-3 rounded-xl font-semibold transition-colors">
                      Tandai Selesai
                    </button>
                  </div>

                  <!-- Module Content Area -->
                  <div id="module-content-area" class="mb-8">
                    <!-- PDF Viewer -->
                    <div id="pdf-viewer" class="hidden">
                      <h3 class="text-xl font-semibold text-gray-900 mb-4">Materi PDF</h3>
                      <div class="border border-gray-300 rounded-lg overflow-hidden">
                        <iframe id="pdf-frame" class="w-full h-96" frameborder="0"></iframe>
                      </div>
                    </div>

                    <!-- Video Player -->
                    <div id="video-player" class="hidden">
                      <h3 class="text-xl font-semibold text-gray-900 mb-4">Video Pembelajaran</h3>
                      <div class="border border-gray-300 rounded-lg overflow-hidden">
                        <video id="video-element" class="w-full h-96" controls>
                          <source src="" type="video/mp4">
                          Browser Anda tidak mendukung video player.
                        </video>
                      </div>
                    </div>

                    <!-- Text Content -->
                    <div id="text-content" class="hidden">
                      <h3 class="text-xl font-semibold text-gray-900 mb-4">Konten Pembelajaran</h3>
                      <div id="text-content-body" class="prose max-w-none">
                        <!-- Text content will be inserted here -->
                      </div>
                    </div>
                  </div>

                  <!-- Module Navigation -->
                  <div class="flex justify-between items-center pt-6 border-t border-gray-200">
                    <button id="prev-module-btn" onclick="navigateModule('prev')"
                      class="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors flex items-center gap-2">
                      <span>‚Üê</span>
                      <span>Modul Sebelumnya</span>
                    </button>

                    <button id="next-module-btn" onclick="navigateModule('next')"
                      class="px-6 py-3 gradient-primary text-white rounded-lg hover:shadow-lg transition-shadow flex items-center gap-2">
                      <span>Modul Selanjutnya</span>
                      <span>‚Üí</span>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Certificate Modal -->
      <div id="certificate-modal"
        class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
        <div class="bg-white rounded-xl p-8 max-w-md w-full mx-4">
          <div class="text-center">
            <div class="text-6xl mb-4">üèÜ</div>
            <h3 class="text-2xl font-bold text-gray-900 mb-4">Selamat!</h3>
            <p class="text-gray-600 mb-6">Anda telah menyelesaikan seluruh modul dalam kursus ini. Sertifikat Anda sudah
              siap untuk diunduh!</p>
            <div class="flex gap-4">
              <button onclick="closeCertificateModal()"
                class="flex-1 px-4 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
                Tutup
              </button>
              <button onclick="downloadCertificate()"
                class="flex-1 px-4 py-3 gradient-primary text-white rounded-lg hover:shadow-lg transition-shadow">
                Unduh Sertifikat
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      let currentCourse = null;
      let courseId = null;
      let modules = [];
      let currentModuleIndex = -1;
      let completedModules = new Set();
      // Pagination state for modules
      let modulesCurrentPage = 1;
      let modulesPerPage = 5;
      let modulesTotalPages = 1;
      let totalModules = 0;
      let progressPercentage = 0;

      async function loadMyCourses() {
        // Extract courseId from URL path /courses/:courseId/modules
        const pathParts = window.location.pathname.split('/');
        courseId = pathParts[2]; // /courses/courseId/modules

        if (!courseId) {
          showError('Course ID tidak ditemukan');
          return;
        }

        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/login';
          return;
        }

        let isPurchased = false;
        let myCoursesResult;

        // Check if user has purchased this course
        const myCoursesResponse = await fetch('/api/courses/my-courses', {
          headers: { 'Authorization': `Bearer ${token}` }
        });

        if (myCoursesResponse.ok) {
          myCoursesResult = await myCoursesResponse.json();
          isPurchased = myCoursesResult.data.some(course => course.id === courseId);
        } else {
          showError('Terjadi Kesalahan');
          return;
        }

        if (!isPurchased) {
          showError('Anda belum membeli kursus ini');
          return;
        }

        progressPercentage = myCoursesResult.data.filter(course => course.id === courseId)[0]?.progress_percentage || 0;

        if (progressPercentage === 100){
          document.getElementById('cert-button').classList.remove('hidden');
        }

        loadCourseModules()
      }

      async function loadCourseModules() {
        try {
          showLoadingModules();

          const params = new URLSearchParams({
            page: modulesCurrentPage.toString(),
            limit: modulesPerPage.toString(),
          });

          // Load course detail and modules
          const [courseResponse, modulesResponse] = await Promise.all([
            fetch(`/api/courses/${courseId}`, {
              headers: { 'Authorization': `Bearer ${token}` }
            }),
            fetch(`/api/courses/${courseId}/modules?${params}`, {
              headers: { 'Authorization': `Bearer ${token}` }
            })
          ]);

          if (courseResponse.ok && modulesResponse.ok) {
            const courseResult = await courseResponse.json();
            const modulesResult = await modulesResponse.json();

            modules = modulesResult.data.sort((a, b) => a.order - b.order);
            // Initialize completed modules from API response
            modules.forEach(module => {
              if (module.is_completed) {
                completedModules.add(module.id);
              }
            });
            currentCourse = courseResult.data;

            // Update course title
            document.getElementById('course-title').textContent = currentCourse.title;
            // Setup pagination
            displayModulesList(modules);
            updateModulesPagination(modulesResult.pagination);
            updateProgress();
          } else if (courseResponse.status === 401 || modulesResponse.status === 401) {
            logout();
          } else {
            showError();
          }
        } catch (error) {
          showError(error);
        }
      }

      function displayModulesList(modules) {
        const container = document.getElementById('modules-list');
        const loading = document.getElementById('loading-modules');
        const error = document.getElementById('error-modules');
        loading.classList.add('hidden');
        error.classList.add('hidden');
        container.classList.remove('hidden');

        container.innerHTML = modules.map((module, i) => {
          // The index for selectModule should be the real index in modules array
          const realIndex = i + (modulesCurrentPage - 1) * modulesPerPage;
          const isCompleted = completedModules.has(module.id);
          return `
            <div 
              onclick="selectModule(${realIndex})"
              class="p-4 border border-gray-200 rounded-lg cursor-pointer hover:bg-blue-50 transition-colors ${currentModuleIndex === realIndex ? 'bg-blue-100 border-blue-300' : ''}"
            >
              <div class="flex items-center justify-between">
                <div class="flex-1">
                  <h2 class="font-semibold text-gray-900 mb-1">${module.title}</h2>
                  <p class="text-sm text-gray-600 line-clamp-2">${module.description}</p>
                </div>
                <div class="ml-3">
                  ${isCompleted ? '<span class="text-green-600 text-xl">‚úÖ</span>' : '<span class="text-gray-400 text-xl">‚≠ï</span>'}
                </div>
              </div>
            </div>
          `;
        }).join('');
      }

      function updateModulesPagination(pagination) {
        modulesTotalPages = pagination.total_pages ?? 1;
        totalModules = pagination.total_items ?? 0;
        const container = document.getElementById('modules-pagination-container');
        let paginationHTML = '';
        // Previous button
        if (modulesCurrentPage > 1) {
          paginationHTML += `<button onclick="goToModulesPage(${modulesCurrentPage - 1})" class="px-2 py-1 text-xs border border-gray-300 rounded hover:bg-gray-50">‚Üê</button>`;
        }
        // Page numbers (show up to 5 pages)
        const startPage = Math.max(1, modulesCurrentPage - 2);
        const endPage = Math.min(modulesTotalPages, modulesCurrentPage + 2);
        if (startPage > 1) {
          paginationHTML += `
            <button onclick="goToModulesPage(1)" class="px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50">1</button>
          `;
          if (startPage > 2) {
            paginationHTML += `<span class="px-2 text-gray-500">...</span>`;
          }
        }

        for (let i = startPage; i <= endPage; i++) {
          const isActive = i === modulesCurrentPage;
          paginationHTML += `
            <button 
              onclick="goToModulesPage(${i})" 
              class="px-3 py-2 text-sm border rounded-lg ${isActive ? 'bg-blue-600 text-white border-blue-600' : 'border-gray-300 hover:bg-gray-50'}"
            >
              ${i}
            </button>
          `;
        }

        if (endPage < modulesTotalPages) {
          if (endPage < modulesTotalPages - 1) {
            paginationHTML += `<span class="px-2 text-gray-500">...</span>`;
          }
          paginationHTML += `
            <button onclick="goToModulesPage(${modulesTotalPages})" class="px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50">${modulesTotalPages}</button>
          `;
        }

        // Next button
        if (modulesCurrentPage < modulesTotalPages) {
          paginationHTML += `
            <button onclick="goToModulesPage(${modulesCurrentPage + 1})" class="px-3 py-2 text-sm border border-gray-300 rounded-lg hover:bg-gray-50">
              ‚Üí
            </button>
          `;
        }

        container.innerHTML = paginationHTML;
      }

      function goToModulesPage(page) {
        modulesCurrentPage = page;
        loadCourseModules();
      }

      function changeModulesPerPage() {
        modulesPerPage = parseInt(document.getElementById('modules-per-page-select').value) || 10;
        modulesCurrentPage = 1;
        loadCourseModules();
      }

      function showError(text) {
        showErrorModules()
        document.getElementById('no-module-selected').classList.add('hidden');
        document.getElementById('module-main-error').classList.remove('hidden');
        if (text) {
          document.querySelector('#module-main-error .text-gray-600').textContent = text;
        }
      }

      async function selectModule(index) {
        const realPage = Math.ceil((index + 1) / modulesPerPage);
        modulesCurrentPage = realPage;
        currentModuleIndex = index;

        await loadCourseModules();
        // currentModuleIndex = index % modulesPerPage;
        showModuleContent();
        updateNavigationButtons();
      }

      function showModuleContent() {
        const module = modules[currentModuleIndex % modules.length];
        const noModuleSelected = document.getElementById('no-module-selected');
        const moduleContent = document.getElementById('module-content');

        noModuleSelected.classList.add('hidden');
        moduleContent.classList.remove('hidden');

        // Update module info
        document.getElementById('module-title').textContent = module.title;
        document.getElementById('module-description').textContent = module.description;

        // Update complete button
        const isCompleted = completedModules.has(module.id);
        const completeBtn = document.getElementById('complete-btn');
        if (isCompleted) {
          completeBtn.textContent = 'Selesai ‚úÖ';
          completeBtn.className = 'px-6 py-3 bg-green-600 text-white rounded-xl font-semibold transition-colors';
          completeBtn.disabled = true;
        } else {
          completeBtn.textContent = 'Tandai Selesai';
          completeBtn.className = 'px-6 py-3 border border-gray-300 text-gray-700 rounded-xl font-semibold hover:bg-gray-50 transition-colors';
          completeBtn.disabled = false;
        }

        // Show appropriate content type
        hideAllContent();

        if (module.pdf_content) {
          showPdfContent(module.pdf_content);
        } else if (module.video_content) {
          showVideoContent(module.video_content);
        } else {
          showTextContent(module.content || 'Konten modul tidak tersedia.');
        }
      }

      function hideAllContent() {
        document.getElementById('pdf-viewer').classList.add('hidden');
        document.getElementById('video-player').classList.add('hidden');
        document.getElementById('text-content').classList.add('hidden');
      }

      function showPdfContent(pdfUrl) {
        const pdfViewer = document.getElementById('pdf-viewer');
        const pdfFrame = document.getElementById('pdf-frame');

        pdfFrame.src = pdfUrl;
        pdfViewer.classList.remove('hidden');
      }

      function showVideoContent(videoUrl) {
        const videoPlayer = document.getElementById('video-player');
        const videoElement = document.getElementById('video-element');

        videoElement.src = videoUrl;
        videoPlayer.classList.remove('hidden');
      }

      function showTextContent(content) {
        const textContent = document.getElementById('text-content');
        const textBody = document.getElementById('text-content-body');

        textBody.innerHTML = content.replace(/\n/g, '<br>');
        textContent.classList.remove('hidden');
      }

      function updateNavigationButtons() {
        const prevBtn = document.getElementById('prev-module-btn');
        const nextBtn = document.getElementById('next-module-btn');

        prevBtn.style.display = currentModuleIndex > 0 ? 'flex' : 'none';
        nextBtn.style.display = currentModuleIndex < totalModules - 1 ? 'flex' : 'none';
      }

      function navigateModule(direction) {
        if (direction === 'prev' && currentModuleIndex > 0) {
          selectModule(currentModuleIndex - 1);
        } else if (direction === 'next' && currentModuleIndex < totalModules - 1) {
          selectModule(currentModuleIndex + 1);
        }
      }

      async function toggleModuleCompletion() {
        const module = modules[currentModuleIndex % modules.length];
        const isCompleted = completedModules.has(module.id);

        const token = localStorage.getItem('token');

        try {
          const response = await fetch(`/api/modules/${module.id}/complete`, {
            method: 'PATCH',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            }
          });

          if (response.ok) {
            completedModules.add(module.id);

            showModuleContent();
            await loadMyCourses();
            await loadCourseModules();

            if (progressPercentage == 100) {
              setTimeout(() => {
                showCertificateModal();
              }, 1000);
            }
          } else {
            const result = await response.json();
            console.error('Error toggling completion:', result.message);
          }
        } catch (error) {
          console.error('Error toggling module completion:', error);
        }
      }

      function updateProgress() {
        const progress = progressPercentage;
        const progressBar = document.getElementById('progress-bar');
        const progressText = document.getElementById('progress-text');

        progressBar.style.width = `${progress}%`;
        progressText.textContent = `${Math.round(progress)}%`;
      }

      function showCertificateModal() {
        document.getElementById('certificate-modal').classList.remove('hidden');
      }

      function closeCertificateModal() {
        document.getElementById('certificate-modal').classList.add('hidden');
      }

      function downloadCertificate() {
        // Implementation for certificate download
        const token = localStorage.getItem('token');

        fetch(`/api/courses/${currentCourse.id}/certificate`, {
          headers: { 'Authorization': `Bearer ${token}` }
        })
          .then(response => response.blob())
          .then(blob => {
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `Certificate-${currentCourse.title.replace(/\s+/g, '-')}.pdf`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
          })
          .catch(error => {
            console.error('Error downloading certificate:', error);
            alert('Gagal mengunduh sertifikat');
          });

        closeCertificateModal();
      }

      function goBack() {
        window.location.href = `/courses/${currentCourse.id}`;
      }

      function showLoadingModules() {
        document.getElementById('loading-modules').classList.remove('hidden');
        document.getElementById('modules-list').classList.add('hidden');
        document.getElementById('error-modules').classList.add('hidden');
      }

      function showErrorModules() {
        document.getElementById('loading-modules').classList.add('hidden');
        document.getElementById('modules-list').classList.add('hidden');
        document.getElementById('error-modules').classList.remove('hidden');
      }

      function logout() {
        localStorage.removeItem('token');
        window.location.href = '/login';
      }

      // Load course modules when page loads
      document.addEventListener('DOMContentLoaded', loadMyCourses);
      // document.addEventListener('DOMContentLoaded', loadCourseModules);

      // Check if already logged in
      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = '/login';
      }
    </script>
</body>

</html>